@model DetailProject
@{
    Layout = "_LayoutProject";
}
<partial name="~/Views/Shared/Partial/_NavLeft.cshtml" />

<div class="main-wrapper ">
    <main class="main users chart-page" id="skip-target">
        <div class="container-xxl flex-grow-1" style="margin-top: 6%;">
            @if (Model.Works.Count <= 0 && Model.PTasks.Count <= 0)
            {
                <div class="container text-center mt-4">
                    <h5>Hãy tạo công việc và nhiệm vụ để tạo báo cáo!</h5>
                </div>
            } else {
                <form asp-controller="Excel" asp-action="Export">
                    <button class="btn btn-success mb-2" type="submit">Xuất excel</button>
                </form>
                <div class="chart">
                    <canvas id="myChart" aria-label="Site statistics" role="img"></canvas>
                </div>
            }
        </div>
    </main>
</div>

@section Scripts{
    <script>
        var listMonth = [];
        var works = @Html.Raw(Json.Serialize(Model.Works));
        var tasks = @Html.Raw(Json.Serialize(Model.PTasks));

        // Lấy tháng nhỏ nhất của startTime
        var minStartWorkMonth = new Date(works[0].startTime).getMonth() + 1;
        var minStartTaskMonth = new Date(tasks[0].startDay).getMonth() + 1;

        // Lấy tháng lớn nhất của endTime
        var maxEndWorkMonth = new Date(works[0].endTime).getMonth() + 1;
        var maxEndTaskMonth = new Date(tasks[0].endDay).getMonth() + 1;

        works.forEach(function (item) {
            var startMonth = new Date(item.startTime).getMonth() + 1;
            var endMonth = new Date(item.endTime).getMonth() + 1;
            if (startMonth < minStartWorkMonth) {
                minStartWorkMonth = startMonth;
            }
            if (endMonth > maxEndWorkMonth) {
                maxEndWorkMonth = endMonth;
            }
        });

        tasks.forEach(function (item) {
            var startMonth = new Date(item.startDay).getMonth() + 1;
            var endMonth = new Date(item.endDay).getMonth() + 1;
            if (startMonth < minStartTaskMonth) {
                minStartTaskMonth = startMonth;
            }
            if (endMonth > maxEndTaskMonth) {
                maxEndTaskMonth = endMonth;
            }
        });

        // Tạo mảng allMonths chứa tất cả các tháng từ minStartMonth đến maxEndMonth
        var allMonths = [];
        for (var i = minStartWorkMonth; i <= maxEndWorkMonth; i++) {
            allMonths.push(i);
        }

        for (var i = minStartTaskMonth; i <= maxEndTaskMonth; i++) {
            if (!allMonths.includes(i)) {
                allMonths.push(i);
            }
        }

        // Sắp xếp allMonths theo thứ tự tăng dần
        allMonths.sort(function (a, b) {
            return a - b;
        });

        // Tạo listMonth từ allMonths
        allMonths.forEach(function (month) {
            var label = "Tháng " + month;
            listMonth.push(label);
        });

        // Lọc và đếm công việc có status = true trong mỗi tháng
        var completedWorks = listMonth.map(function (monthLabel, index) {
            var monthWorks = works.filter(function (item) {
                var month = new Date(item.endTime).getMonth() + 1;
                return monthLabel === "Tháng " + month && item.status === true;
            });
            return monthWorks.length;
        });

        var completedTasks = listMonth.map(function (monthLabel, index) {
            var monthTasks = tasks.filter(function (item) {
                var month = new Date(item.endDay).getMonth() + 1;
                return monthLabel === "Tháng " + month && item.status === true;
            });
            return monthTasks.length;
        });

        // Lấy tham chiếu đến thẻ canvas
        var canvas = document.getElementById('myChart');
        var ctx = canvas.getContext('2d');

        // Dữ liệu cho biểu đồ
        var data = {
            labels: listMonth,
            datasets: [{
                label: 'Công việc',
                data: completedWorks,
                borderColor: 'blue',
                fill: false,
                tension: 0.4
            }, {
                label: 'Nhiệm vụ',
                data: completedTasks,
                borderColor: 'green',
                fill: false,
                tension: 0.2,
                borderDash: [] // Tắt đường kẻ ngang
            }]
        };

        // Tạo biểu đồ đường
        var myChart = new Chart(ctx, {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Thông kê công việc và nhiệm vụ'
                }
            }
        });
        

    </script>   
}